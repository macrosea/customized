
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

:nnoremap <leader><F1> :!less ~/.vimrc.local<cr>
set pastetoggle=<F2>
:noremap <F3> *
:noremap <leader><F3> #
"map <Leader><F5> :!tagscope<cr><cr>

:nnoremap <leader>sv :source $MYVIMRC<cr>
":noremap <tab> <c-w><c-p>
:noremap <s-tab> <c-w><c-w> "switch window
map <silent> <leader><cr> :noh<cr> "Disable highlight

"switch between .h and .c++
nmap <silent> <Leader>sw :FSHere<cr>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nmap wv     <C-w>v
nmap ws     <C-w>s
nmap wc     <C-w>c

:noremap <leader>m :let &mouse=(&mouse == 'a' ? '' : 'a')<CR>:set paste!<CR>:set nu!<CR>

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>M mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"""""""""""""""""""""""""""""""""""""""""
" Move a line of text using Ctrl+[jk] or Comamnd+[jk] on mac
"""""""""""""""""""""""""""""""""""'''
nmap <C-j> mz:m+<cr>`z
nmap <C-k> mz:m-2<cr>`z
vmap <C-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <C-k> :m'<-2<cr>`>my`<mzgv`yo`z

nnoremap <leader>p viwp

"Ag{
    let g:ag_prg= '/usr/local/bin/ag --nogroup --nocolor --column --ignore .git 
                  \ --ignore *.tags'
    "command! Agg exe 'Ag! -Q ' . expand('<cword>')
    nnoremap <F4> : silent! exe 'Ag! -Q ' . expand('<cword>')<Cr>
" }

" buffer {
    " buffer快速导航
    nnoremap <leader>, :bp<CR>
    nnoremap <leader>. :bn<CR>
    nnoremap <leader>/ :bd<CR>
    " 查看buffers
    nnoremap <Leader>l :ls<CR>
    " 通过索引快速跳转
    nnoremap <Leader>1 :1b<CR>
    nnoremap <Leader>2 :2b<CR>
    nnoremap <Leader>3 :3b<CR>
    nnoremap <Leader>4 :4b<CR>
    nnoremap <Leader>5 :5b<CR>
    nnoremap <Leader>6 :6b<CR>
    nnoremap <Leader>7 :7b<CR>
    nnoremap <Leader>8 :8b<CR>
    nnoremap <Leader>9 :9b<CR>
    nnoremap <Leader>0 :10b<CR>
" }

"CtrlP {
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    let g:ctrlp_map = '<C-p>'
    let g:ctrlp_cmd = 'CtrlP'

    map <C-f> :CtrlPMixed<CR>
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    nnoremap <Leader>fs :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1
"}
"nnoremap <Leader>fs :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" easymotion {
    map <leader> <Plug>(easymotion-prefix)
    map <leader>f <Plug>(easymotion-s2)
    map <leader>s <Plug>(easymotion-f2)
    map <leader>l <Plug>(easymotion-lineforward)
    map <leader>j <Plug>(easymotion-j2)
    map <leader>k <Plug>(easymotion-k2)
    map <leader>h <Plug>(easymotion-linebackward)
" }

" folder {
    :nnoremap <space> za
    set nofoldenable
" }

" NERDTree{
    "nmap <F9>  :NERDTreeToggle<CR>
    let NERDTreeChDirMode = 0
    let NERDTreeWinSize = 25
    let NERDTreeWinPos="left"
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ "Unknown"   : "?"
        \ }

    " Automatically open a NERDTree if no files where specified
    "autocmd vimenter * if !argc() | NERDTree | endif
    " Close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" }
" Tagbar {
    let g:tagbar_ctags_bin='/usr/local/Cellar/ctags/5.8_1/bin/ctags'
    "nnoremap <F8> :TagbarToggle<CR>
    let g:tagbar_autoclose=1
    let g:tagbar_width=25
    let g:tagbar_left=0
" }
:noremap <F6> :TagbarToggle<CR>:NERDTreeToggle<CR><C-W><C-L>



" tern_for_vim {
""enable keyboard shortcuts
    let g:tern_map_keys=1
    "show argument hints
    let g:tern_show_argument_hints='on_hold'
    " 补全时显示函数类型定义
    let g:tern_show_signature_in_pum = 1
    " 跳转到浏览器
    nnoremap <leader>tb :TernDocBrowse<cr>
    " 显示变量定义
    nnoremap <leader>tt :TernType<cr>
    " 跳转到定义处
    nnoremap <leader>tf :TernDef<cr>
    " 显示文档
    nnoremap <leader>td :TernDoc<cr>
    " 预览窗口显示定义处代码
    nnoremap <leader>tp :TernDefPreview<cr>
    " 变量重命名
    nnoremap <leader>tr :TernRename<cr>
    " location 列表显示全部引用行
    nnoremap <leader>ts :TernRefs<cr>
" }

" YouCompleteMe {
    " 设置跳转到方法/函数定义的快捷键
    nnoremap <F7> :YcmCompleter GoTo<CR>
    nmap <S-F7> :YcmForceCompileAndDiagnostics<CR>
    nnoremap <leader><F7> :YcmCompleter GoToReferences<CR>
    nnoremap <leader>gt :YcmCompleter GetType<CR>
    nnoremap <leader>gf :YcmCompleter GoToDefinition <CR>
    nnoremap <leader>gd :YcmCompleter GoToDeclaration <CR>
    " 触发补全快捷键
    let g:ycm_key_list_select_completion = ['<TAB>', '<c-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<S-TAB>', '<c-p>', '<Up>']
    let g:ycm_auto_trigger = 1
    " 最小自动触发补全的字符大小设置为 3
    let g:ycm_min_num_of_chars_for_completion = 3
    " YCM的previw窗口比较恼人，还是关闭比较好
    set completeopt-=preview
    "打开vim时不再询问是否加载ycm_extra_conf.py配置"
    let g:ycm_confirm_extra_conf=0
    set completeopt=longest,menu
    let g:ycm_global_ycm_extra_conf='~/.vimrcs/ycm_extra_conf.py'
    set pumheight=10
    let g:ycm_error_symbol = '>>'
    let g:ycm_warning_symbol = '>*'
    let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.','re![_a-zA-z0-9]'],
  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \             're!\[.*\]\s'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::','re![_a-zA-Z0-9]'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \ }
" }

" vim-rooter {
    let g:rooter_change_directory_for_non_project_files = 'current'
    let g:rooter_change_directory_for_non_project_files = ''
    let g:rooter_patterns = ['.js.tags', '.c.tags', '.git/']
    let g:rooter_silent_chdir = 1
" }


" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

set nocscopeverbose
set tags=.c.tags,.js.tags
:autocmd BufWritePost * call system("tagscope")
let g:indent_guides_auto_colors = 0
let g:syntastic_javascript_checkers = ['eslint']

"autocmd VimEnter * wincmd p
"set expandtab
set softtabstop=2 shiftwidth=2 expandtab
